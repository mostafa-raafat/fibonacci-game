{"version":3,"sources":["components/game/game.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameComponent","props","gameGrid","fibSequence","fibListCache","fibNumbersCache","timerHandle","componentWillUnmount","clearTimeout","i","rows","Array","cols","fill","state","selectedCell","row","undefined","column","className","this","map","gameRow","rowIndex","key","gameCell","columnIndex","onClick","cellClicked","bind","checkFibonacci","setState","setTimeout","Object","keys","length","rowNumber","FibValueMemo","FibListMemo","resetFibList","value","check1","Math","pow","check2","isPerfectSquare","num","sqrt","isPerfect1","isPerfect2","list","fib1","fib2","tmp","FibKey","toString","isFib","FibListKey","isFibSequence","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAiBqBA,G,kBAQjB,WAAYC,GAAa,IAAD,uBACpB,4CAAMA,KAPFC,SAAoB,GAMJ,EALhBC,YAAmB,GAKH,EAJhBC,aAAoB,GAIJ,EAHhBC,gBAAuB,GAGP,EAFhBC,iBAEgB,IAoNxBC,qBAAuB,WAEf,EAAKD,aACLE,aAAa,EAAKF,cArNtB,IAAK,IAAIG,EAAI,EAAGA,EAAI,EAAKR,MAAMS,KAAMD,IACjC,EAAKP,SAASO,GAAK,IAAIE,MAAM,EAAKV,MAAMW,MAAMC,KAAK,MAHnC,OAKpB,EAAKC,MAAQ,CACTZ,SAAU,EAAKA,SACfa,aAAc,CACVC,SAAKC,EACLC,YAAQD,GAEZd,YAAa,IAXG,E,sEAed,IAAD,OACL,OACI,yBAAKgB,UAAU,QAEXC,KAAKN,MAAMZ,SAASmB,KAAI,SAACC,EAAcC,GAAf,OACpB,yBAAKC,IAAKD,EAAUJ,UAAU,aAE1BG,EAAQD,KAAI,SAACI,EAAeC,GAAhB,OACR,yBACIF,IAAKD,EAAS,IAAIG,EAClBP,UAAS,2DAED,EAAKL,MAAMC,aAAaC,MAAQO,GAChC,EAAKT,MAAMC,aAAaG,SAAWQ,EACnC,iBAAmB,GAJlB,iDAOD,UAAGH,EAAH,YAAeG,KAAiB,EAAKZ,MAAMX,YAC3C,uBAAyB,IAGjCwB,QAAS,EAAKC,YAAYC,KAAK,EAAMN,EAAUG,IAE7CD,GAAsB,c,kCAkBjCT,EAAaE,GAC5B,IADmD,IAAD,OACzCT,EAAI,EAAGA,EAAIW,KAAKnB,MAAMS,KAAMD,IACjCW,KAAKlB,SAASO,GAAGS,KAGrBE,KAAKlB,SAASc,GAAKE,KAEnB,IAAK,IAAIT,EAAI,EAAGA,EAAIW,KAAKnB,MAAMW,KAAMH,IACjCW,KAAKlB,SAASc,GAAKP,KACnBW,KAAKU,eAAeV,KAAKlB,SAASO,GAAIA,GAG1CW,KAAKW,SAAS,CAAC7B,SAAUkB,KAAKlB,SAAUa,aAAc,CAAEC,MAAKE,UAAUf,YAAaiB,KAAKjB,cAGzFiB,KAAKd,YAAc0B,YAAW,WACvBC,OAAOC,KAAK,EAAK/B,aAAagC,OAAS,IACtC,EAAKhC,YAAc,IACvB,EAAK4B,SAAS,CAAEhB,aAAc,CAAEC,SAAKC,EAAWC,YAAQD,GAAYd,YAAa,OAClF,O,qCAQgBa,EAAoBoB,GACvC,IAAK,IAAI3B,EAAI,EAAGA,EAAIO,EAAImB,OAAQ1B,IACoC,QAA5DO,EAAIP,IAAMO,EAAIP,EAAE,IAAMO,EAAIP,EAAE,IAAMO,EAAIP,EAAE,IAAMO,EAAIP,EAAE,MACvDO,EAAIP,IAAMO,EAAIP,EAAE,IAAMO,EAAIP,EAAE,IAAMO,EAAIP,EAAE,IAAMO,EAAIP,EAAE,IAAM,GAEnDW,KAAKiB,aAAarB,EAAIP,KAAOW,KAAKiB,aAAarB,EAAIP,EAAE,KACrDW,KAAKiB,aAAarB,EAAIP,EAAE,KAAOW,KAAKiB,aAAarB,EAAIP,EAAE,KACvDW,KAAKiB,aAAarB,EAAIP,EAAE,KAGrBW,KAAKkB,YAAY,CAACtB,EAAIP,GAAIO,EAAIP,EAAE,GAAIO,EAAIP,EAAE,GAAIO,EAAIP,EAAE,GAAIO,EAAIP,EAAE,MAC7DW,KAAKmB,aAAaH,EAAW3B,K,mCAU5BO,EAAaE,GAC9BE,KAAKlB,SAASc,GAAKE,GACnBE,KAAKlB,SAASc,GAAKE,EAAO,GAC1BE,KAAKlB,SAASc,GAAKE,EAAO,GAC1BE,KAAKlB,SAASc,GAAKE,EAAO,GAC1BE,KAAKlB,SAASc,GAAKE,EAAO,GAAK,KAE/BE,KAAKjB,YAAL,UAAoBa,EAApB,YAA2BE,IAC3BE,KAAKjB,YAAL,UAAoBa,EAApB,YAA2BE,EAAO,IAClCE,KAAKjB,YAAL,UAAoBa,EAApB,YAA2BE,EAAO,IAClCE,KAAKjB,YAAL,UAAoBa,EAApB,YAA2BE,EAAO,IAClCE,KAAKjB,YAAL,UAAoBa,EAApB,YAA2BE,EAAO,KAAO,I,4BAQ/BsB,GACV,IAAIC,EAAS,EAAIC,KAAKC,IAAIH,EAAO,GAAK,EAClCI,EAAS,EAAIF,KAAKC,IAAIH,EAAO,GAAK,EAEtC,SAASK,EAAgBC,GACrB,OAAOJ,KAAKK,KAAKD,GAAO,IAAM,EAIlC,IAAIE,EAAaH,EAAgBJ,GAC7BQ,EAAaJ,EAAgBD,GAEjC,SAAII,IAAcC,OAGHD,IAAcC,K,oCAQXC,GAClB,GAAIA,EAAKf,OAAS,EACd,OAAO,EAMX,IAHA,IAAIgB,EAAO,EACPC,EAAO,EAEJD,EAAOD,EAAK,IAAI,CACnB,IAAIG,EAAMF,EAAOC,EACjBD,EAAOC,EACPA,EAAOC,EAGX,GAAIF,IAASD,EAAK,GACd,OAAO,EAGX,GAAIE,IAASF,EAAK,GACd,OAAO,EAGX,IAAK,IAAIzC,EAAI,EAAGA,EAAIyC,EAAKf,OAAQ1B,IAAI,CACjC,GAAIyC,EAAKzC,GAAK,EACV,OAAO,EAEX,GAAIyC,EAAKzC,KAAQyC,EAAKzC,EAAI,GAAKyC,EAAKzC,EAAI,GACpC,OAAO,EAEf,OAAO,I,mCAQU+B,GACjB,IACIc,EAAiBd,EAAMe,WAK3B,OAJID,KAAUlC,KAAKf,gBACPe,KAAKf,gBAAgBiD,GAErBlC,KAAKf,gBAAgBiD,GAAUlC,KAAKoC,MAAMhB,K,kCAStCU,GAChB,IACIO,EAAqBP,EAAKK,WAK9B,OAJIE,KAAcrC,KAAKhB,aACHgB,KAAKhB,aAAaqD,GAElBrC,KAAKhB,aAAaqD,GAAcrC,KAAKsC,cAAcR,O,GApNpCS,cCL5BC,MARf,WACE,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,CAAeT,KAAM,GAAIE,KAAM,OCKjBiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3011825d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './game.style.scss';\n\ntype gridSize = {\n    rows: number,\n    cols: number\n}\n\ntype stateType = {\n    gameGrid: any[][],\n    selectedCell: {\n        row: number | undefined,\n        column: number | undefined\n    },\n    fibSequence: any\n}\n\nexport default class GameComponent extends Component<gridSize, stateType> {\n\n    private gameGrid: any[][] = [];\n    private fibSequence: any = {};\n    private fibListCache: any = {};\n    private fibNumbersCache: any = {};\n    private timerHandle: NodeJS.Timeout | undefined;\n    \n    constructor(props: any) {\n        super(props);\n        for (let i = 0; i < this.props.rows; i++) {\n            this.gameGrid[i] = new Array(this.props.cols).fill(null);\n        }\n        this.state = {\n            gameGrid: this.gameGrid,\n            selectedCell: {\n                row: undefined,\n                column: undefined\n            },\n            fibSequence: {}\n        }\n    }\n\n    render() {\n        return (\n            <div className='grid'>\n            {\n                this.state.gameGrid.map((gameRow: any, rowIndex: any) => (\n                    <div key={rowIndex} className=\"grid__row\">\n                    {\n                        gameRow.map((gameCell: any, columnIndex: any) => (\n                            <div \n                                key={rowIndex+'-'+columnIndex}\n                                className={`grid__cell \n                                    ${\n                                        this.state.selectedCell.row === rowIndex || \n                                        this.state.selectedCell.column === columnIndex ? \n                                        'cell-highlight' : ''\n                                    }\n                                    ${\n                                        `${rowIndex}-${columnIndex}` in this.state.fibSequence ?\n                                        'cell-highlight-green' : ''\n                                    }`\n                                }\n                                onClick={this.cellClicked.bind(this, rowIndex, columnIndex)}\n                            >\n                                { gameCell ? gameCell : '' }\n                            </div>\n                        ))      \n                    }\n                    </div>\n                ))\n            }\n            </div>\n        )\n    };\n\n    /**\n     * Handle click on cell.\n     * Cell row & column will be increase by +1 & it will light up yellow.\n     * If a fibonacci sequence is found in a row it will light up green & reset to empty.\n     * @param {number} row\n     * @param {number} column\n     */\n    public cellClicked(row: number, column: number): void {\n        for (let i = 0; i < this.props.rows; i++) {\n            this.gameGrid[i][column]++;\n        }\n\n        this.gameGrid[row][column]--;\n\n        for (let i = 0; i < this.props.cols; i++) {\n            this.gameGrid[row][i]++;\n            this.checkFibonacci(this.gameGrid[i], i);\n        }\n\n        this.setState({gameGrid: this.gameGrid, selectedCell: { row, column }, fibSequence: this.fibSequence });\n        \n        // Reset state after every click.\n        this.timerHandle = setTimeout(() => {\n            if(Object.keys(this.fibSequence).length > 0)\n                this.fibSequence = {};\n            this.setState({ selectedCell: { row: undefined, column: undefined}, fibSequence: {} });\n        }, 500);\n    }\n\n    /**\n     * Check Fibonacci numbers in grid.\n     * @param {Array<number>} row\n     * @param {number} rowNumber\n     */\n    private checkFibonacci(row: Array<number>, rowNumber: number): void {\n        for (let i = 0; i < row.length; i++) {\n            if((row[i] && row[i+1] && row[i+2] && row[i+3] && row[i+4]) !== null && \n            (row[i] && row[i+1] && row[i+2] && row[i+3] && row[i+4]) > 0) {\n                if(\n                    this.FibValueMemo(row[i]) && this.FibValueMemo(row[i+1]) && \n                    this.FibValueMemo(row[i+2]) && this.FibValueMemo(row[i+3]) &&\n                    this.FibValueMemo(row[i+4])\n                ) \n                {\n                    if(this.FibListMemo([row[i], row[i+1], row[i+2], row[i+3], row[i+4]]))\n                        this.resetFibList(rowNumber, i);\n                }\n            }\n        }\n    }\n\n    /**\n     * reset fibonacci list.\n     * @param {number} value\n     */\n    private resetFibList(row: number, column: number): void {\n        this.gameGrid[row][column]   = \n        this.gameGrid[row][column+1] = \n        this.gameGrid[row][column+2] = \n        this.gameGrid[row][column+3] =\n        this.gameGrid[row][column+4] = null;\n\n        this.fibSequence[`${row}-${column}`] =\n        this.fibSequence[`${row}-${column+1}`] =\n        this.fibSequence[`${row}-${column+2}`] =\n        this.fibSequence[`${row}-${column+3}`] =\n        this.fibSequence[`${row}-${column+4}`] = true;\n    }\n\n    /**\n     * Check if number is fibonacci.\n     * @param {number} value\n     * @returns {boolean}\n     */\n    private isFib(value: number): boolean {\n        var check1 = 5 * Math.pow(value, 2) + 4;\n        var check2 = 5 * Math.pow(value, 2) - 4;\n\n        function isPerfectSquare(num: number) {\n            return Math.sqrt(num) % 1 === 0;\n        }\n\n        // We see if the checks are perfect squares\n        var isPerfect1 = isPerfectSquare(check1);\n        var isPerfect2 = isPerfectSquare(check2);\n\n        if (isPerfect1 && isPerfect2) {\n            return true;\n        }\n        else return !!(isPerfect1 || isPerfect2);\n    }\n\n    /**\n     * Check if list is part of fibonacci sequence.\n     * @param {number[]} list\n     * @returns {boolean}\n     */\n    private isFibSequence(list: number[]): boolean {\n        if (list.length < 3) {\n            return false;\n        }\n\n        let fib1 = 0;\n        let fib2 = 1;\n\n        while (fib1 < list[0]) {\n            let tmp = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = tmp;\n        }\n\n        if (fib1 !== list[0]) {\n            return false;\n        }\n\n        if (fib2 !== list[1]) {\n            return false;\n        }\n\n        for (let i = 2; i < list.length; i++){\n            if (list[i] < 0)\n                return false;\n\n            if (list[i] !== (list[i - 1] + list[i - 2]))\n                return false;\n        }\n        return true;\n    }\n\n    /**\n     * Memorize fibonacci values.\n     * @param {number} value\n     * @returns {boolean}\n     */\n    private FibValueMemo(value: number): boolean {\n        let isFib: boolean;\n        let FibKey: string = value.toString();\n        if (FibKey in this.fibNumbersCache)\n            isFib = this.fibNumbersCache[FibKey];\n        else\n            isFib = this.fibNumbersCache[FibKey] = this.isFib(value);\n        return isFib;\n    }\n\n    /**\n     * Memorize fibonacci list.\n     * @param {number[]} list\n     * @returns {boolean}\n     */\n    private FibListMemo(list: number[]): boolean {\n        let isFibSequence: boolean;\n        let FibListKey: string = list.toString();\n        if (FibListKey in this.fibListCache)\n            isFibSequence = this.fibListCache[FibListKey];\n        else\n            isFibSequence = this.fibListCache[FibListKey] = this.isFibSequence(list);\n        return isFibSequence;\n    }\n\n    /**\n     * Clear setTimeout handler if exist.\n     * @memberof ReactLifeCycle\n     */\n    componentWillUnmount = () => {\n        // Is our timer running?\n        if (this.timerHandle) {\n            clearTimeout(this.timerHandle);\n        }  \n    }\n}\n","import React from 'react';\nimport './App.css';\nimport GameComponent from './components/game/game.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameComponent rows={50} cols={50}></GameComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}